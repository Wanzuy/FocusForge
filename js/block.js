// Block Page Script cho FocusForge
// X·ª≠ l√Ω trang b·ªã ch·∫∑n v·ªõi th·ªëng k√™ v√† emergency access

class FocusForgeBlockPage {
    constructor() {
        this.init();
    }

    async init() {
        this.loadBlockedSite();
        await this.loadSettings();
        await this.updateStats();
        this.setupEventListeners();
        this.updateTimeInfo();
        this.startTimer();
        this.showMotivationalMessage();
    }

    loadBlockedSite() {
        const urlParams = new URLSearchParams(window.location.search);
        this.blockedSite = urlParams.get("site") || "website n√†y";
        document.title = `${this.blockedSite} b·ªã ch·∫∑n - FocusForge`;
    }

    async loadSettings() {
        this.settings = await chrome.storage.local.get([
            "emergencyAccess",
            "schedules",
            "dailyStats",
            "motivationalMessages",
        ]);
    }

    async updateStats() {
        try {
            const today = new Date().toISOString().split("T")[0];
            const stats = this.settings.dailyStats[today] || {};

            // C·∫≠p nh·∫≠t s·ªë l·∫ßn c·ªë truy c·∫≠p trang n√†y
            const siteAttempts = stats[this.blockedSite] || 0;
            document.getElementById("todayAttempts").textContent = siteAttempts;

            // C·∫≠p nh·∫≠t t·ªïng s·ªë l·∫ßn c·ªë truy c·∫≠p
            const totalAttempts = Object.values(stats).reduce(
                (a, b) => a + b,
                0
            );

            // L∆∞u attempt m·ªõi
            if (!stats[this.blockedSite]) {
                stats[this.blockedSite] = 0;
            }
            stats[this.blockedSite]++;

            // L∆∞u l·∫°i stats
            const newDailyStats = { ...this.settings.dailyStats };
            newDailyStats[today] = stats;

            await chrome.storage.local.set({ dailyStats: newDailyStats });

            // C·∫≠p nh·∫≠t l·∫°i UI
            document.getElementById("todayAttempts").textContent =
                stats[this.blockedSite];
        } catch (error) {
            console.error("Error updating stats:", error);
        }
    }

    setupEventListeners() {
        // Emergency access
        if (this.settings.emergencyAccess) {
            document.getElementById("emergencySection").style.display = "block";

            document
                .getElementById("emergencyBtn")
                .addEventListener("click", () => {
                    this.showEmergencyForm();
                });

            document
                .getElementById("confirmEmergency")
                .addEventListener("click", () => {
                    this.handleEmergencyAccess();
                });

            document
                .getElementById("cancelEmergency")
                .addEventListener("click", () => {
                    this.hideEmergencyForm();
                });
        }

        // Disable focus mode
        document
            .getElementById("disableFocusBtn")
            .addEventListener("click", () => {
                this.disableFocusMode();
            });

        // Keyboard shortcuts
        document.addEventListener("keydown", (e) => {
            // Esc ƒë·ªÉ ƒë√≥ng emergency access
            if (e.key === "Escape") {
                this.hideEmergencyForm();
            }

            // Ctrl+Enter ƒë·ªÉ confirm emergency
            if (e.ctrlKey && e.key === "Enter") {
                const form = document.getElementById("emergencyForm");
                if (form.style.display !== "none") {
                    this.handleEmergencyAccess();
                }
            }
        });
    }

    updateTimeInfo() {
        const schedules = this.settings.schedules || [];
        const activeSchedule = this.getCurrentActiveSchedule(schedules);

        if (activeSchedule) {
            const endTime = activeSchedule.endTime;
            const remainingTime = this.calculateRemainingTime(endTime);

            document.getElementById("endTime").textContent = endTime;
            document.getElementById("remainingTime").textContent =
                remainingTime;
        } else {
            document.getElementById("endTime").textContent = "Kh√¥ng x√°c ƒë·ªãnh";
            document.getElementById("remainingTime").textContent =
                "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }

    getCurrentActiveSchedule(schedules) {
        const now = new Date();
        const currentDay = now.toLocaleDateString("en-US", {
            weekday: "lowercase",
        });
        const currentTime = now.toTimeString().slice(0, 5);

        return schedules.find((schedule) => {
            if (!schedule.enabled) return false;
            if (!schedule.days.includes(currentDay)) return false;
            return (
                currentTime >= schedule.startTime &&
                currentTime <= schedule.endTime
            );
        });
    }

    calculateRemainingTime(endTime) {
        const now = new Date();
        const [hours, minutes] = endTime.split(":").map(Number);
        const endDate = new Date(now);
        endDate.setHours(hours, minutes, 0, 0);

        // N·∫øu th·ªùi gian k·∫øt th√∫c ƒë√£ qua, c√≥ th·ªÉ l√† ng√†y h√¥m sau
        if (endDate < now) {
            endDate.setDate(endDate.getDate() + 1);
        }

        const diff = endDate - now;
        const remainingHours = Math.floor(diff / (1000 * 60 * 60));
        const remainingMinutes = Math.floor(
            (diff % (1000 * 60 * 60)) / (1000 * 60)
        );

        if (remainingHours > 0) {
            return `${remainingHours}h ${remainingMinutes}m`;
        } else {
            return `${remainingMinutes}m`;
        }
    }

    startTimer() {
        // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i m·ªói ph√∫t
        setInterval(() => {
            this.updateTimeInfo();
        }, 60000);
    }

    showMotivationalMessage() {
        const messages = [
            "B·∫°n ƒëang l√†m r·∫•t t·ªët! üåü",
            "M·ªói l·∫ßn ch·∫∑n l√† m·ªôt b∆∞·ªõc ti·∫øn! üí™",
            "S·ª± t·∫≠p trung l√† si√™u nƒÉng l·ª±c! ‚ö°",
            "B·∫°n m·∫°nh m·∫Ω h∆°n s·ª± c√°m d·ªó! üéØ",
            "Th√†nh c√¥ng ƒë·∫øn t·ª´ s·ª± ki√™n tr√¨! üöÄ",
            "H√£y t·ª± h√†o v·ªÅ b·∫£n th√¢n! üëè",
            "B·∫°n ƒëang x√¢y d·ª±ng th√≥i quen tuy·ªát v·ªùi! üèóÔ∏è",
        ];

        const randomMessage =
            messages[Math.floor(Math.random() * messages.length)];
        document.getElementById("motivationalText").textContent = randomMessage;

        // Thay ƒë·ªïi message m·ªói 10 gi√¢y
        setInterval(() => {
            const newMessage =
                messages[Math.floor(Math.random() * messages.length)];
            document.getElementById("motivationalText").textContent =
                newMessage;
        }, 10000);
    }

    showEmergencyForm() {
        document.getElementById("emergencyForm").style.display = "block";
        document.getElementById("emergencyReason").focus();
    }

    hideEmergencyForm() {
        document.getElementById("emergencyForm").style.display = "none";
        document.getElementById("emergencyReason").value = "";
    }

    async handleEmergencyAccess() {
        const reason = document.getElementById("emergencyReason").value.trim();

        if (!reason) {
            alert("Vui l√≤ng nh·∫≠p l√Ω do kh·∫©n c·∫•p");
            return;
        }

        if (reason.length < 10) {
            alert("L√Ω do ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±");
            return;
        }

        try {
            const response = await this.sendMessage({
                action: "emergencyAccess",
                reason: reason,
                site: this.blockedSite,
            });

            if (response.success) {
                // Hi·ªÉn th·ªã th√¥ng b√°o v√† redirect
                const notification = document.createElement("div");
                notification.className = "emergency-success";
                notification.innerHTML = `
                    <h3>üö® Truy c·∫≠p kh·∫©n c·∫•p ƒë∆∞·ª£c c·∫•p</h3>
                    <p>Focus Mode s·∫Ω ƒë∆∞·ª£c t·∫Øt trong 5 ph√∫t</p>
                    <p>L√Ω do: ${reason}</p>
                    <p>ƒêang chuy·ªÉn h∆∞·ªõng trong <span id="countdown">3</span> gi√¢y...</p>
                `;

                // Th√™m styles
                const style = document.createElement("style");
                style.textContent = `
                    .emergency-success {
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: #fff3cd;
                        border: 2px solid #ffeaa7;
                        border-radius: 12px;
                        padding: 24px;
                        text-align: center;
                        z-index: 10000;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    }
                    
                    .emergency-success h3 {
                        color: #856404;
                        margin-bottom: 12px;
                    }
                    
                    .emergency-success p {
                        color: #856404;
                        margin-bottom: 8px;
                    }
                `;

                document.head.appendChild(style);
                document.body.appendChild(notification);

                // Countdown v√† redirect
                let countdown = 3;
                const countdownElement = document.getElementById("countdown");
                const countdownInterval = setInterval(() => {
                    countdown--;
                    countdownElement.textContent = countdown;

                    if (countdown <= 0) {
                        clearInterval(countdownInterval);
                        window.history.back();
                    }
                }, 1000);
            } else {
                alert("Kh√¥ng th·ªÉ c·∫•p quy·ªÅn truy c·∫≠p kh·∫©n c·∫•p");
            }
        } catch (error) {
            console.error("Error handling emergency access:", error);
            alert("C√≥ l·ªói x·∫£y ra: " + error.message);
        }
    }

    async disableFocusMode() {
        // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
        const confirmed = confirm(
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt Focus Mode?\n" +
                "ƒêi·ªÅu n√†y s·∫Ω cho ph√©p truy c·∫≠p t·∫•t c·∫£ c√°c trang web."
        );

        if (!confirmed) return;

        try {
            const response = await this.sendMessage({
                action: "toggleFocusMode",
                enabled: false,
            });

            if (response.success) {
                // Hi·ªÉn th·ªã th√¥ng b√°o
                const notification = document.createElement("div");
                notification.innerHTML = `
                    <div class="disable-success">
                        <h3>üò¥ Focus Mode ƒë√£ ƒë∆∞·ª£c t·∫Øt</h3>
                        <p>B·∫°n c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£ c√°c trang web</p>
                        <p>ƒêang chuy·ªÉn h∆∞·ªõng...</p>
                    </div>
                `;

                document.body.appendChild(notification);

                // Redirect sau 2 gi√¢y
                setTimeout(() => {
                    window.history.back();
                }, 2000);
            } else {
                alert(
                    "Kh√¥ng th·ªÉ t·∫Øt Focus Mode: " +
                        (response.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh")
                );
            }
        } catch (error) {
            console.error("Error disabling focus mode:", error);
            alert("C√≥ l·ªói x·∫£y ra: " + error.message);
        }
    }

    sendMessage(message) {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage(message, resolve);
        });
    }
}

// Kh·ªüi t·∫°o block page khi DOM ready
document.addEventListener("DOMContentLoaded", () => {
    new FocusForgeBlockPage();
});
